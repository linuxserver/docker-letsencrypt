#!/usr/bin/with-contenv bash

# check to make sure that the required variables are set
# shellcheck disable=SC2153
if [ -z "$URL" ]; then
  echo "Please pass your URL as an environment variable in your docker run command. See docker info for more details."
  exit 1
fi

# make our folders and links
mkdir -p \
	/config/{log/letsencrypt,log/fail2ban,etc/letsencrypt,fail2ban,crontabs} \
	/var/run/fail2ban
rm -rf /etc/letsencrypt
ln -s /config/etc/letsencrypt /etc/letsencrypt

# copy/update the fail2ban config defaults to/in /config
cp -R /defaults/fail2ban/filter.d /config/fail2ban/
cp -R /defaults/fail2ban/action.d /config/fail2ban/
# if jail.local is missing in /config, copy default
[[ ! -f /config/fail2ban/jail.local ]] && \
	cp /defaults/jail.local /config/fail2ban/jail.local
# Replace fail2ban config with user config
[[ -d /etc/fail2ban/filter.d ]] && \
	rm -rf /etc/fail2ban/filter.d
[[ -d /etc/fail2ban/action.d ]] && \
	rm -rf /etc/fail2ban/action.d
cp -R /config/fail2ban/filter.d /etc/fail2ban/
cp -R /config/fail2ban/action.d /etc/fail2ban/
cp /config/fail2ban/jail.local /etc/fail2ban/jail.local

# copy crontab and proxy defaults if needed
[[ ! -f /config/crontabs/root ]] && \
	cp /etc/crontabs/root /config/crontabs/
[[ ! -f /config/nginx/proxy.conf ]] && \
	cp /defaults/proxy.conf /config/nginx/proxy.conf

# import user crontabs
rm /etc/crontabs/*
cp /config/crontabs/* /etc/crontabs/

# create original config file if it doesn't exist
if [ ! -f "/config/donoteditthisfile.conf" ]; then
# shellcheck disable=SC2153
  echo -e "ORIGURL=\"$URL\" ORIGSUBDOMAINS=\"$SUBDOMAINS\" ORIGONLY_SUBDOMAINS=\"$ONLY_SUBDOMAINS\" ORIGEXTRA_DOMAINS=\"$EXTRA_DOMAINS\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGHTTPVAL=\"$HTTPVAL\" CERT2_ORIGSUBDOMAINS=\"$CERT2_SUBDOMAINS\"" > /config/donoteditthisfile.conf
fi

# load original config settings
# shellcheck disable=SC1091
. /config/donoteditthisfile.conf

# compare dhparams existence and level, create if necessary
if [ ! "$DHLEVEL" = "$ORIGDHLEVEL" ]; then
  rm -rf /config/nginx/dhparams.pem
  echo "DH parameters bit setting changed. Deleting old dhparams file."
fi

if [ ! -f "/config/nginx/dhparams.pem" ]; then
  echo "Creating DH parameters for additional security. This may take a very long time. There will be another message once this process is completed"
  openssl dhparam -out /config/nginx/dhparams.pem "$DHLEVEL"
  echo "DH parameters successfully created - $DHLEVEL bits"
else
  echo "$ORIGDHLEVEL bit DH parameters present"
fi

# figuring out url only vs url & subdomains vs subdomains only
if [ ! -z "$SUBDOMAINS" ]; then
  echo "SUBDOMAINS entered, processing"
  for job in $(echo "$SUBDOMAINS" | tr "," " "); do
    export SUBDOMAINS2="$SUBDOMAINS2 -d ${job}.${URL}"
  done
  if [ "$ONLY_SUBDOMAINS" = true ]; then
    URLS="$SUBDOMAINS2"
    echo "Only subdomains, no URL in cert"
  else
    URLS="-d ${URL}${SUBDOMAINS2}"
  fi
  echo "Sub-domains processed for certificate 1 are: $SUBDOMAINS2"
else
  echo "No subdomains defined"
  URLS="-d $URL"
fi

#Edit for Second Certificate
# figuring out url only vs url & subdomains vs subdomains only
if [ ! -z "$CERT2_SUBDOMAINS" ]; then
  echo "CERT2_SUBDOMAINS entered, processing"
  for job in $(echo "$CERT2_SUBDOMAINS" | tr "," " "); do
    export CERT2_SUBDOMAINS2="$CERT2_SUBDOMAINS2 -d ${job}.${URL}"
  done
  if [ "$ONLY_SUBDOMAINS" = true ]; then
    CERT2_URLS="$CERT2_SUBDOMAINS2"
    echo "Only subdomains, no URL in cert"
  else
    echo "Root URL in certificate, set Only subdomains to TRUE to generate a second certificate"
  fi
  echo "Sub-domains processed for certificate 2 are: $CERT2_SUBDOMAINS2"
else
  echo "No subdomains for Certificate 2 defined"
fi

# add extra domains
if [ ! -z "$EXTRA_DOMAINS" ]; then
  echo "EXTRA_DOMAINS entered, processing"
  for job in $(echo "$EXTRA_DOMAINS" | tr "," " "); do
    export EXTRA_DOMAINS2="$EXTRA_DOMAINS2 -d ${job}"
  done
  echo "Extra domains processed are: $EXTRA_DOMAINS2"
  URLS="$URLS $EXTRA_DOMAINS2"
fi

# figuring out whether to use e-mail and which
if [[ $EMAIL == *@* ]]; then
  echo "E-mail address entered: ${EMAIL}"
  EMAILPARAM="-m ${EMAIL}"
else
  echo "No e-mail address entered or address invalid"
  EMAILPARAM="--register-unsafely-without-email"
fi

# setting the validation method to use
if [ "$HTTPVAL" = "true" ]; then
  PREFCHAL="http"
else
  PREFCHAL="tls-sni"
fi

# setting the symlink for key location
rm -rf /config/keys/letsencrypt
if [ "$ONLY_SUBDOMAINS" = "true" ]; then
  DOMAIN="$(echo "$SUBDOMAINS" | tr ',' ' ' | awk '{print $1}').${URL}"
  ln -s ../etc/letsencrypt/live/"$DOMAIN" /config/keys/letsencrypt
else
  ln -s ../etc/letsencrypt/live/"$URL" /config/keys/letsencrypt
fi

#Edit for second Certificate
# setting the symlink for key2 location
rm -rf /config/keys/letsencrypt2
if [ "$ONLY_SUBDOMAINS" = "true" ] && [ ! -z "$CERT2_SUBDOMAINS" ]; then
  CERT2_DOMAIN="$(echo "$CERT2_SUBDOMAINS" | tr ',' ' ' | awk '{print $1}').${URL}"
  ln -s ../etc/letsencrypt/live/"$CERT2_DOMAIN" /config/keys/letsencrypt2
else
  echo "Conditions for second certificate not set, not generating letsencrypt2 directory"
fi

# checking for changes in cert variables, revoking certs if necessary
if [ ! "$URL" = "$ORIGURL" ] || [ ! "$SUBDOMAINS" = "$ORIGSUBDOMAINS" ] || [ ! "$ONLY_SUBDOMAINS" = "$ORIGONLY_SUBDOMAINS" ] || [ ! "$EXTRA_DOMAINS" = "$ORIGEXTRA_DOMAINS" ] || [ ! "$HTTPVAL" = "$ORIGHTTPVAL" ] || [ ! "$CERT2_SUBDOMAINS" = "$CERT2_ORIGSUBDOMAINS" ]; then
  echo "Different sub/domains entered than what was used before. Revoking and deleting existing certificate, and an updated one will be created"
  if [ "$ORIGONLY_SUBDOMAINS" = "true" ]; then
    ORIGDOMAIN="$(echo "$ORIGSUBDOMAINS" | tr ',' ' ' | awk '{print $1}').${ORIGURL}"
    certbot revoke --non-interactive --cert-path /config/etc/letsencrypt/live/"$ORIGDOMAIN"/fullchain.pem
    #Edit for more verbose logging
    echo "Cert 1 Revoked"
    CERT2_ORIGDOMAIN="$(echo "$CERT2_ORIGSUBDOMAINS" | tr ',' ' ' | awk '{print $1}').${ORIGURL}"
    certbot revoke --non-interactive --cert-path /config/etc/letsencrypt/live/"$CERT2_ORIGDOMAIN"/fullchain.pem
    echo "Cert 2 Revoked"
    
  else
    certbot revoke --non-interactive --cert-path /config/etc/letsencrypt/live/"$ORIGURL"/fullchain.pem
    #Note: no need to revoke if not originally set to only subdomains, as that is not done with a root certificate
    echo "Cert 1 Revoked - Root Domain"
  fi
  rm -rf /config/etc
  mkdir -p /config/etc/letsencrypt
else
  echo "no changes detected"
fi

# generating certs if necessary
if [ ! -f "/config/keys/letsencrypt/fullchain.pem" ]; then
  echo "Generating new Cert 1 certificate"
# shellcheck disable=SC2086
  certbot certonly --non-interactive --renew-by-default --standalone --preferred-challenges $PREFCHAL --rsa-key-size 4096 $EMAILPARAM --agree-tos $URLS
  if [ -d /config/keys/letsencrypt ]; then
    cd /config/keys/letsencrypt || exit
  else
    echo "ERROR: Cert does not exist! Please see the validation error above. The issue may be due to incorrect dns or port forwarding settings. Please fix your settings and recreate the container"
    sleep infinity
  fi
  openssl pkcs12 -export -out privkey.pfx -inkey privkey.pem -in cert.pem -certfile chain.pem -passout pass:
else
  chmod +x /app/le-renew.sh
  sleep 1
  /app/le-renew.sh
fi

#Edit to Generate Second Certificate if necessary
if [ ! -f "/config/keys/letsencrypt2/fullchain.pem" ] && [ ! -z "$CERT2_SUBDOMAINS" ]; then
  echo "Generating new Cert 2 certificate"
# shellcheck disable=SC2086
  certbot certonly --non-interactive --renew-by-default --standalone --preferred-challenges $PREFCHAL --rsa-key-size 4096 $EMAILPARAM --agree-tos $CERT2_URLS
  cd /config/keys/letsencrypt2 || exit
  openssl pkcs12 -export -out privkey.pfx -inkey privkey.pem -in cert.pem -certfile chain.pem -passout pass:
else
  sleep 1
fi

# saving new variables
echo -e "ORIGURL=\"$URL\" ORIGSUBDOMAINS=\"$SUBDOMAINS\" ORIGONLY_SUBDOMAINS=\"$ONLY_SUBDOMAINS\" ORIGEXTRA_DOMAINS=\"$EXTRA_DOMAINS\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGHTTPVAL=\"$HTTPVAL\" CERT2_ORIGSUBDOMAINS=\"$CERT2_SUBDOMAINS\"" > /config/donoteditthisfile.conf

# logfiles needed by fail2ban
[[ ! -f /config/log/nginx/error.log ]] && \
	touch /config/log/nginx/error.log
[[ ! -f /config/log/nginx/access.log ]] && \
	touch /config/log/nginx/access.log

# permissions
chown -R abc:abc \
	/config
chmod -R 0644 /etc/logrotate.d
chmod -R +r /config/log
